{"version":3,"sources":["util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","addToNetwork","a","params","chainId","num","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","window","ethereum","request","method","accounts","then","result","console","log","catch","error","address","status","message","connectWallet","addressArray","obj","target","href","mintNFT","amount","transactionParameters","gas","parseInt","to","from","selectedAddress","value","utils","toWei","data","contract","methods","mint","encodeABI","txHash","success","getCurrentWalletConnected","eth","Contract","length","Minter","props","useState","walletAddress","setWallet","setStatus","addWalletListener","on","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","Card","Header","id","Button","onClick","variant","String","substring","Body","Title","Img","src","Footer","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b38d0b0.chunk.js","sourcesContent":["\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xBA4a122Cb6f7Cb07498F9bAf638e2B550a1F0346\"; \r\nconst price = 0.01;\r\n\r\n\r\nconst toHex = (num) => {\r\n  return '0x'+num.toString(16)\r\n}\r\n\r\nexport const addToNetwork = async () => {\r\n  const params = {\r\n    chainId: toHex(137), // A 0x-prefixed hexadecimal string\r\n    chainName: \"Polygon Mainet\",\r\n    nativeCurrency: {\r\n      name: \"MATIC\",\r\n      symbol:\"MOMO\", // 2-6 characters long\r\n      decimals: 0,\r\n    },\r\n    rpcUrls: [\"https://polygon-rpc.com/\"],\r\n    blockExplorerUrls: [\"https://polygon-rpc.com/\"]\r\n  }\r\n  try{\r\n    const accounts = await window.ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n    });\r\n    window.ethereum.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [params, accounts[0]],\r\n    })\r\n    .then((result) => {\r\n      console.log(result)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n    });\r\n  }catch (err) {\r\n    return {\r\n      address: \"\",\r\n      status: \"😥 \" + err.message,\r\n    };\r\n}};\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const mintNFT = async(amount) => {\r\n     \r\n    \r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        gas: parseInt((258000*amount).toString()).toString(16),\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        value: parseInt(web3.utils.toWei((price * amount).toString(),\"ether\")).toString(16),\r\n        data: window.contract.methods.mint(window.ethereum.selectedAddress, amount).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n      \r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            \r\n            success: true,\r\n            status: \"✅ Check out your transaction on Polygon: https://rinkeby.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n    \r\n    //index = await window.contract.methods.totalSupply().call();\r\n\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the connect button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT,\r\n  addToNetwork,\r\n} from \"./util/interact.js\";\r\nimport {Button, Card} from 'react-bootstrap'\r\n\r\n\r\nconst Minter = (props) => {\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const [amount, setAmount] = useState(1);\r\n\r\n  /*const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");*/\r\n\r\n  useEffect(async () => {\r\n    const { address, status } = await getCurrentWalletConnected();\r\n\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { success, status } = await mintNFT(amount);\r\n    setStatus(status);\r\n    /*if (success) {\r\n      setName(\"\");\r\n      setDescription(\"\");\r\n      setURL(\"\");\r\n    }*/\r\n  };\r\n\r\n  const addToPolygonPressed = async () => {\r\n    const walletResponse = await addToNetwork();\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <Card className=\"text-center\">\r\n  <Card.Header> \r\n     <p id=\"status\">\r\n        {status}\r\n      </p>\r\n</Card.Header>\r\n  <Button className=\"btn btn-dark\"id=\"addPolygonButton\" onClick={addToNetwork}>\r\n  🦊Switch to Polygon network!\r\n      </Button> \r\n  <Button  variant=\"warning\" id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </Button>\r\n  <Card.Body>\r\n    \r\n    <Card.Title>For this test please make sure to be on Polygon's test network(Mumbai)</Card.Title>\r\n    <Card.Img variant=\"top\" src=\"https://cdn.discordapp.com/attachments/619998912165445642/931990564621127720/mistery.png\" />\r\n    <Button className=\"btn btn-dark\"id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint mystery owl\r\n      </Button> \r\n  </Card.Body>\r\n  <Card.Footer className=\"text-muted\">4444[Insert counting logic here?] unique nfts available!</Card.Footer>\r\n</Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Container} from 'react-bootstrap';\r\nimport Minter from './Minter';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container className=\"text-center generalContainer\">\r\n      {/*<ParticlesContainer></ParticlesContainer> */}\r\n        <Minter></Minter>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}